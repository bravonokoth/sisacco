import 'package:flutter/foundation.dart';
import 'dart:math';
import '../services/supabase_service.dart';
import '../models/loan.dart';

class LoanProvider with ChangeNotifier {
  final SupabaseService _supabaseService = SupabaseService();
  
  List<Loan> _loans = [];
  List<LoanProduct> _loanProducts = [];
  bool _isLoading = false;
  String? _errorMessage;

  List<Loan> get loans => _loans;
  List<LoanProduct> get loanProducts => _loanProducts;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;

  List<Loan> get activeLoans {
    return _loans.where((loan) => loan.status == LoanStatus.active).toList();
  }

  List<Loan> get overdueLoans {
    return _loans.where((loan) => loan.status == LoanStatus.overdue).toList();
  }

  double get totalOutstanding {
    return activeLoans.fold(0.0, (sum, loan) => sum + loan.outstandingBalance);
  }

  double get totalMonthlyPayment {
    return activeLoans.fold(0.0, (sum, loan) => sum + loan.monthlyPayment);
  }

  Future<void> loadUserLoans(String userId) async {
    _setLoading(true);
    _clearError();

    try {
      _loans = await _supabaseService.getUserLoans(userId);
      _setLoading(false);
    } catch (e) {
      _setError('Failed to load loans: $e');
      _setLoading(false);
    }
  }

  Future<void> loadLoanProducts() async {
    _setLoading(true);
    _clearError();

    try {
      _loanProducts = await _supabaseService.getLoanProducts();
      _setLoading(false);
    } catch (e) {
      _setError('Failed to load loan products: $e');
      _setLoading(false);
    }
  }

  Future<bool> applyForLoan({
    required String userId,
    required String productId,
    required double requestedAmount,
    required int termMonths,
    Map<String, dynamic>? applicationData,
  }) async {
    _setLoading(true);
    _clearError();

    try {
      final product = _loanProducts.firstWhere((p) => p.id == productId);
      
      final loan = Loan(
        id: '', // Will be generated by Supabase
        userId: userId,
        productId: productId,
        productName: product.name,
        principalAmount: requestedAmount,
        outstandingBalance: requestedAmount,
        monthlyPayment: _calculateMonthlyPayment(
          requestedAmount,
          product.interestRate,
          termMonths,
        ),
        interestRate: product.interestRate,
        status: LoanStatus.pending,
        termMonths: termMonths,
        createdAt: DateTime.now(),
        metadata: applicationData,
      );

      await _supabaseService.createLoanApplication(loan);
      await loadUserLoans(userId);
      _setLoading(false);
      return true;
    } catch (e) {
      _setError('Loan application failed: $e');
      _setLoading(false);
      return false;
    }
  }

  Future<bool> updateLoanStatus(String loanId, LoanStatus status) async {
    _setLoading(true);
    _clearError();

    try {
      await _supabaseService.updateLoanStatus(loanId, status);
      
      // Update local state
      final loanIndex = _loans.indexWhere((loan) => loan.id == loanId);
      if (loanIndex != -1) {
        _loans[loanIndex] = Loan(
          id: _loans[loanIndex].id,
          userId: _loans[loanIndex].userId,
          productId: _loans[loanIndex].productId,
          productName: _loans[loanIndex].productName,
          principalAmount: _loans[loanIndex].principalAmount,
          outstandingBalance: _loans[loanIndex].outstandingBalance,
          monthlyPayment: _loans[loanIndex].monthlyPayment,
          interestRate: _loans[loanIndex].interestRate,
          nextPaymentDate: _loans[loanIndex].nextPaymentDate,
          status: status,
          disbursementDate: _loans[loanIndex].disbursementDate,
          termMonths: _loans[loanIndex].termMonths,
          createdAt: _loans[loanIndex].createdAt,
          updatedAt: DateTime.now(),
          metadata: _loans[loanIndex].metadata,
        );
      }
      
      _setLoading(false);
      return true;
    } catch (e) {
      _setError('Failed to update loan status: $e');
      _setLoading(false);
      return false;
    }
  }

  double _calculateMonthlyPayment(double principal, double annualRate, int months) {
    final monthlyRate = annualRate / 100 / 12;
    if (monthlyRate == 0) return principal / months;
    
    return principal * 
        (monthlyRate * pow(1 + monthlyRate, months)) / 
        (pow(1 + monthlyRate, months) - 1);
  }

  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String error) {
    _errorMessage = error;
    notifyListeners();
  }

  void _clearError() {
    _errorMessage = null;
    notifyListeners();
  }
}
